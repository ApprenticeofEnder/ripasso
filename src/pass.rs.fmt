use std;
use std::sync::mpsc::{Sender, Receiver, channel, SendError};
use std::time::Duration;
use std::error::Error;
use std::path::{PathBuf, Path};
use std::env;
use std::thread;
use std::fs;
use std::fs::File;
use std::str;
use std::result::Result;
use notify;
use gpgme;
use glob;

use notify::Watcher;

use std::sync::{Arc, Mutex};
use chrono::{DateTime, Local};

#[derive(Clone)]
pub struct PasswordEntry {
    pub name: String, // Name of the entry
    pub path: String, // Path, relative to the store
    created: DateTime<Local>,
    updated : DateTime<Local>,
    filename: String
}

impl PasswordEntry {
    pub fn password(&self) -> Option<String> {
        let mut input = File::open(&self.filename).unwrap();

        // Decrypt password
        let mut ctx = gpgme::Context::from_protocol(gpgme::Protocol::OpenPgp).unwrap();
        let mut output = Vec::new();
        if let Err(e) = ctx.decrypt(&mut input, &mut output) {
            println!("decryption failed {:?}", e);
            return None;
        }
        let password = str::from_utf8(&output).unwrap();
        let firstline: String = password.split('\n').take(1).collect();
        Some(firstline)
    }
}

pub enum PasswordEvent {
    NewPassword,
    Error(Box<Error>),
}

pub type PasswordList = Arc<Mutex<Vec<PasswordEntry>>>;

pub fn search(l: &PasswordList, query: &str) -> Vec<PasswordEntry> {
    let passwords = l.lock().unwrap();
    fn normalized(s: &str) -> String {
        s.to_lowercase()
    };
    fn matches(s: &str, q: &str) -> bool {
        normalized(s).as_str().contains(normalized(q).as_str())
    };
    let matching = passwords.iter().filter(|p| matches(&p.name, query));
    matching.cloned().collect()
}

pub fn watch() -> Result<(Receiver<PasswordEvent>, PasswordList), Box<Error>> {

    let (password_tx, password_rx): (Sender<PasswordEntry>, Receiver<PasswordEntry>) = channel();
    let (event_tx, event_rx): (Sender<PasswordEvent>, Receiver<PasswordEvent>) = channel();

    let dir = password_dir()?;
    let path_iter = load_passwords(&dir)?.chain(watch_passwords(&dir)?);
    // Spawn watcher threads
    thread::spawn(move || {
        for path in path_iter{
        match path{
            Ok(path) => (password_tx.send(to_password(path))),
            Err(e) => {
                event_tx.send(PasswordEvent(Error(&Err("failed loading passwords"))));
            },
        };
    });

    let passwords = Arc::new(Mutex::new(Vec::new()));
    let passwords_out = passwords.clone();

    // Spawn password list update thread
    thread::spawn(move || loop {
        let p = password_rx.recv().expect("password receiver channel failed");
        let mut passwords = passwords.lock().unwrap();
        passwords.push(p);
        event_tx.send(PasswordEvent::NewPassword).expect("password send channel failed")
    });
    Ok((event_rx, passwords_out))
}

fn to_name(base: &PathBuf, path: &PathBuf) -> String {
    path.strip_prefix(base)
        .unwrap()
        .to_string_lossy()
        .into_owned()
        .trim_right_matches(".gpg")
        .to_string()
}

fn to_password(base: &PathBuf, path: &PathBuf) -> PasswordEntry {
    let metadata = fs::metadata(path).unwrap();
    PasswordEntry {
        name: to_name(base, path),
        path: path.to_string_lossy().to_string(),
        filename: path.to_string_lossy().into_owned().clone(),
        created: metadata.created().unwrap().into(),
        updated: metadata.modified().unwrap().into(),
    }
}

/// Determine password directory
fn password_dir() -> Result<PathBuf, Box<Error>> {
    // If a directory is provided via env var, use it
    let pass_home = match env::var("PASSWORD_STORE_DIR") {
        Ok(p) => p,
        Err(_) => {
            env::home_dir()
                .unwrap()
                .join(".password-store")
                .to_string_lossy()
                .into()
        }
    };
    if !Path::new(&pass_home).exists() {
        return Err(From::from("failed to locate password directory"));
    }
    Ok(Path::new(&pass_home).to_path_buf())
}


// Iterator over all existing passwords
fn load_passwords(dir: &PathBuf) -> Result<glob::Paths, glob::PatternError>{
    let password_path_glob = dir.join("**/*.gpg");
    let passpath_str = &password_path_glob.to_string_lossy();
    glob::glob(passpath_str)
}

struct PasswordWatcher {
    rx: Receiver<notify::DebouncedEvent>
}

fn watch_passwords(dir: &PathBuf)-> Result<PasswordWatcher, notify::Error> {
    let (tx, rx)  = channel();
    notify::RecommendedWatcher::new(tx, Duration::from_secs(2))?
        .watch(dir, notify::RecursiveMode::Recursive)?;
    Ok(PasswordWatcher{rx: rx})
}

impl Iterator for PasswordWatcher {
        type Item = Result<PathBuf, glob::GlobError>;
        fn next (&mut self) -> Option<Result<PathBuf, glob::GlobError>>{
        match self.rx.recv().ok()?  {
            notify::DebouncedEvent::Create(path)=>Some(Ok(path))
        }
    }


pub struct PasswordStore {
}

// Securely generate a password
pub fn generate(){
}

impl PasswordStore {
    fn  new( path: &Path) -> PasswordStore{
        PasswordStore{}
    }
    /// Initializes a new password store
    fn init( path: &Path){
    }

    /// List all passwords
    pub fn passwords (&self) -> Vec<PasswordEntry>{
        Vec::new()
    }

    // Get PasswordEntry at path
    pub fn get(&self, path: String) -> Option<PasswordEntry>{
        None
    }

    // Query the store
    pub fn query(&self, query: String) -> Vec<PasswordEntry>{
        Vec::new()
    }

    // Add a new PasswordEntry to the store
    pub fn add(&self, entry: PasswordEntry){
    }

    // Remove a PasswordEntry from the store
    pub fn del(&self, entry: PasswordEntry){
    }

    // Moves the entry at oldpath to newpath
    pub fn rename(&self, oldpath: String, newpath: String){
    }
}

#[cfg(test)]
mod tests {
    extern crate tempdir;
    use self::tempdir::TempDir;
    use super::*;

    #[test]
    fn new(){
        //new on a non-existing directory should be an error
        let store = PasswordStore::new("/completely-bogus");
        assert_eq!(store, Error);

        // new on a empty directory should be an error

        //create empty directory
        let tmp_dir = TempDir::new("ripasso").unwrap();
        let ps = PasswordStore::new(tmp_dir.path());

        // new on an initialized directory should work

        assert!(ps.passwords().len() == 0);
    }
}
